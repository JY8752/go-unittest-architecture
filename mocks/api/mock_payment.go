// Code generated by MockGen. DO NOT EDIT.
// Source: payment.go
//
// Generated by this command:
//
//	mockgen -source=payment.go -destination=../../mocks/api/mock_payment.go -package=mock_api
//
// Package mock_api is a generated GoMock package.
package mock_api

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPayment is a mock of Payment interface.
type MockPayment struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentMockRecorder
}

// MockPaymentMockRecorder is the mock recorder for MockPayment.
type MockPaymentMockRecorder struct {
	mock *MockPayment
}

// NewMockPayment creates a new mock instance.
func NewMockPayment(ctrl *gomock.Controller) *MockPayment {
	mock := &MockPayment{ctrl: ctrl}
	mock.recorder = &MockPaymentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPayment) EXPECT() *MockPaymentMockRecorder {
	return m.recorder
}

// Buy mocks base method.
func (m *MockPayment) Buy(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Buy", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Buy indicates an expected call of Buy.
func (mr *MockPaymentMockRecorder) Buy(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Buy", reflect.TypeOf((*MockPayment)(nil).Buy), arg0)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: random.go
//
// Generated by this command:
//
//	mockgen -source=random.go -destination=../mocks/domain/mock_random.go -package=mock_domain
//
// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSeedGenerator is a mock of SeedGenerator interface.
type MockSeedGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockSeedGeneratorMockRecorder
}

// MockSeedGeneratorMockRecorder is the mock recorder for MockSeedGenerator.
type MockSeedGeneratorMockRecorder struct {
	mock *MockSeedGenerator
}

// NewMockSeedGenerator creates a new mock instance.
func NewMockSeedGenerator(ctrl *gomock.Controller) *MockSeedGenerator {
	mock := &MockSeedGenerator{ctrl: ctrl}
	mock.recorder = &MockSeedGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSeedGenerator) EXPECT() *MockSeedGeneratorMockRecorder {
	return m.recorder
}

// New mocks base method.
func (m *MockSeedGenerator) New() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New")
	ret0, _ := ret[0].(int64)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockSeedGeneratorMockRecorder) New() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockSeedGenerator)(nil).New))
}
